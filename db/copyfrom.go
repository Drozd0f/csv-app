// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateTransactions implements pgx.CopyFromSource.
type iteratorForCreateTransactions struct {
	rows                 []CreateTransactionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTransactions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTransactions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TransactionID,
		r.rows[0].RequestID,
		r.rows[0].TerminalID,
		r.rows[0].PartnerObjectID,
		r.rows[0].AmountTotal,
		r.rows[0].AmountOriginal,
		r.rows[0].CommissionPs,
		r.rows[0].CommissionClient,
		r.rows[0].CommissionProvider,
		r.rows[0].DateInput,
		r.rows[0].DatePost,
		r.rows[0].Status,
		r.rows[0].PaymentType,
		r.rows[0].PaymentNumber,
		r.rows[0].ServiceID,
		r.rows[0].Service,
		r.rows[0].PayeeID,
		r.rows[0].PayeeName,
		r.rows[0].PayeeBankMfo,
		r.rows[0].PayeeBankAccount,
		r.rows[0].PaymentNarrative,
	}, nil
}

func (r iteratorForCreateTransactions) Err() error {
	return nil
}

func (q *Queries) CreateTransactions(ctx context.Context, arg []CreateTransactionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"transactions"}, []string{"transaction_id", "request_id", "terminal_id", "partner_object_id", "amount_total", "amount_original", "commission_ps", "commission_client", "commission_provider", "date_input", "date_post", "status", "payment_type", "payment_number", "service_id", "service", "payee_id", "payee_name", "payee_bank_mfo", "payee_bank_account", "payment_narrative"}, &iteratorForCreateTransactions{rows: arg})
}
